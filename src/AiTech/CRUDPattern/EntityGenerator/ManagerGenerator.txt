using AiTech.CrudPattern;
using AiTech.Database;
using System.Collections.Generic;
using Dapper;
using System.Data.SqlClient;
using System;
using System.Data;
using System.Linq;

namespace Dll.MTOP
{
    public class TransactionManager
    {
        private TransactionCollection List;
        private string CurrentUsername;
        public TransactionManager(string currentUser)
        {
            CurrentUsername = currentUser;
        }

        public void SetItems(IEnumerable<Transaction> items)
        {
            List = new TransactionCollection();
            List.AttachRange(items);
        }

        public IEnumerable<Transaction> GetList()
        {
            using (var db = Connection.CreateConnection())
            {
                db.Open();
                var items = db.Query<Transaction>("Select * from ");

                foreach (var item in items) item.InitializeTrackingChanges();

                return items;
            }
        }

        public void SaveChanges()
        {
            var db = Connection.CreateConnection();
                db.Open();

            var trn = db.BeginTransaction();

            try
            {
                var deletedItems = List.Items.Where(_ => _.RowStatus == RecordStatus.DeletedRecord);
                    if(deletedItems.Count() != 0)
                        DatabaseAction.ExecuteDeleteQuery<Transaction>(CurrentUsername, deletedItems, db, trn);

                foreach (var item in List.Items)
                {
                    switch (item.RowStatus)
                    {
                        case RecordStatus.DeletedRecord:
                            break;

                        case RecordStatus.ModifiedRecord:
                            DatabaseAction.ExecuteUpdateQuery<Transaction>(CurrentUsername, item.Code, item, db, trn);
                            item.InitializeTrackingChanges();
                            break;

                        case RecordStatus.NewRecord:
                            InsertQuery(item, db, trn);
                            item.InitializeTrackingChanges();
                            break;
                    }
                }

                trn.Commit();

                List.CommitChanges();
            }
            catch
            {
                trn.Rollback();
                throw;
            }
            finally
            {
                db.Close();
                db.Dispose();
            }
        }


        private void InsertQuery(Transaction item, SqlConnection db, SqlTransaction trn)
        {
		  throw NotImplementedException
        }
    }
}
