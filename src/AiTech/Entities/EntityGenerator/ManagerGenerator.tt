<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<# 
	//Enter Name of the Class
	//****************************
	var className = "Transaction";


#>
using AiTech.CrudPattern;
using AiTech.Database;
using System.Collections.Generic;
using Dapper;
using System.Data.SqlClient;
using System;
using System.Data;
using System.Linq;

namespace Dll.MTOP
{
    public class <#= className #>Manager
    {
        private <#= className #>Collection List;
        private string CurrentUsername;
        public <#= className #>Manager(string currentUser)
        {
            CurrentUsername = currentUser;
        }

        public void SetItems(IEnumerable<<#= className #>> items)
        {
            List = new <#= className #>Collection();
            List.AttachRange(items);
        }

        public IEnumerable<<#= className #>> GetList()
        {
            using (var db = Connection.CreateConnection())
            {
                db.Open();
                var items = db.Query<<#= className #>>("Select * from ");

                foreach (var item in items) item.InitializeTrackingChanges();

                return items;
            }
        }

        public void SaveChanges()
        {
            var db = Connection.CreateConnection();
                db.Open();

            var trn = db.BeginTransaction();

            try
            {
                var deletedItems = List.Items.Where(_ => _.RowStatus == RecordStatus.DeletedRecord);
                    if(deletedItems.Count() != 0)
                        DatabaseAction.ExecuteDeleteQuery<<#= className #>>(CurrentUsername, deletedItems, db, trn);

                foreach (var item in List.Items)
                {
                    switch (item.RowStatus)
                    {
                        case RecordStatus.DeletedRecord:
                            break;

                        case RecordStatus.ModifiedRecord:
                            DatabaseAction.ExecuteUpdateQuery<<#= className #>>(CurrentUsername, item.Code, item, db, trn);
                            item.InitializeTrackingChanges();
                            break;

                        case RecordStatus.NewRecord:
                            InsertQuery(item, db, trn);
                            item.InitializeTrackingChanges();
                            break;
                    }
                }

                trn.Commit();

                List.CommitChanges();
            }
            catch
            {
                trn.Rollback();
                throw;
            }
            finally
            {
                db.Close();
                db.Dispose();
            }
        }


        private void InsertQuery(<#= className #> item, SqlConnection db, SqlTransaction trn)
        {
		  throw NotImplementedException
        }
    }
}
